{"version":3,"sources":["Redux/api/index.js","constants/actionType.js","components/login/login.js","Redux/action/users.js","components/signup/signup.js","components/navbar/screeone.js","Redux/action/userData.js","components/screentwo/screentwo.js","components/home/home.js","App.js","reportWebVitals.js","reducers/auth.js","reducers/userDetails.js","reducers/index.js","index.js"],"names":["API","axios","create","baseURL","interceptors","request","use","req","localStorage","getItem","headers","Authorization","JSON","parse","token","signIn","formData","post","signUp","deleteData","id","delete","AUTH","LOGOUT","CREATE","FETCH_DATA","DELETE","START_LOADING","SignupSchema","Yup","shape","email","required","password","Login","dispatch","useDispatch","history","useHistory","useState","dangerDark","setDangerDark","form","setForm","useEffect","router","a","api","data","type","push","console","log","className","bg","textColor","isOpen","onClose","prefix","name","color","size","m","r","initialValues","validationSchema","onSubmit","values","errors","touched","hoverBg","onClick","confirmPassword","firstName","lastName","Signup","userName","mobile","typeError","positive","integer","min","address","ScreenOne","dataSubmited","setDataSubmited","payload","createUser","Screentwo","userData","setUserdata","useSelector","state","userDetails","get","Table","scope","username","_id","message","setInterval","window","location","reload","h","w","rounded","shadow","hoverShadow","style","height","display","justifyContent","alignItems","Spinner","Home","isScreen","setIsScreen","Nav","tabs","NavItem","NavLink","active","App","user","setUser","handlelogout","clear","Button","to","pathname","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","authReducer","authData","action","actionType","setItem","stringify","loading","State","isLoading","filter","s","combineReducers","auth","store","createStore","reducers","compose","applyMiddleware","thunk","engine","Styletron","ReactDOM","render","StrictMode","value","debug","debugAfterHydration","theme","colors","primary","accent","document","getElementById"],"mappings":"ySAIMA,E,OAAMC,EAAMC,OAAO,CAAEC,QAAS,sDAGpCH,EAAII,aAAaC,QAAQC,KAAI,SAACC,GAK1B,OAJIC,aAAaC,QAAQ,aACrBF,EAAIG,QAAQC,cAAZ,iBAAsCC,KAAKC,MAAML,aAAaC,QAAQ,YAAYK,QAG/EP,KAGJ,IAGMQ,EAAS,SAACC,GAAD,OAAchB,EAAIiB,KAAK,cAAeD,IAC/CE,EAAS,SAACF,GAAD,OAAchB,EAAIiB,KAAK,cAAeD,IAE/CG,EAAa,SAACC,GAAD,OAAQpB,EAAIqB,OAAJ,UAftB,4DAesB,YAAqBD,KCrB1CE,EAAO,OACPC,EAAS,SACTC,EAAS,SAETC,EAAa,aACbC,EAAS,SACTC,EAAgB,gB,cCIvBC,EAAeC,MAAaC,MAAM,CAEpCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MAAaG,SAAS,cAGvBE,EAAQ,WACjB,IAAMC,EAAWC,cACXC,EAAUC,cAFO,EAKaC,qBALb,mBAKhBC,EALgB,KAKJC,EALI,OAMCF,qBAND,mBAMhBG,EANgB,KAMVC,EANU,KAcvB,OANAC,qBAAU,WCtBQ,IAAC5B,EAAU6B,EDuBpBH,GAEAP,GCzBUnB,EDyBM0B,ECzBIG,EDyBER,ECzBb,uCAAsB,WAAOF,GAAP,iBAAAW,EAAA,+EAEbC,EAAW/B,GAFE,gBAE5BgC,EAF4B,EAE5BA,KAERb,EAAS,CAAEc,KAAM3B,EAAM0B,SACvBH,EAAOK,KAAK,SALwB,gDAOpCC,QAAQC,IAAR,MAPoC,yDAAtB,0DD0Bf,CAACV,IAGA,mCACI,sBAAKW,UAAU,QAAf,UACI,cAAC,eAAD,CACIC,GAAG,UACHC,UAAU,UACVC,OAAQhB,EACRiB,QAAS,kBAAMhB,GAAc,IAC7BiB,OACI,cAAC,OAAD,CACIC,KAAK,UACLC,MAAM,OACNC,KAAK,OACLC,EAAG,CAAEC,EAAG,YAVpB,+BAgBA,oBAAIV,UAAU,SAAd,mBACA,cAAC,IAAD,CACIW,cAAe,CACXjC,MAAO,GACPE,SAAU,IAEdgC,iBAAkBrC,EAClBsC,SAAU,SAAAC,GAENxB,EAAQwB,IARhB,SAWK,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACG,eAAC,IAAD,CAAMhB,UAAU,OAAhB,UACI,uBAAOA,UAAU,QAAjB,mBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,QAAQV,KAAK,UAC1CmB,EAAOrC,OAASsC,EAAQtC,MAAQ,8BAAMqC,EAAOrC,QAAe,KAC7D,uBAAOsB,UAAU,QAAjB,sBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,WAAWV,KAAK,aAC7CmB,EAAOnC,SAAW,8BAAMmC,EAAOnC,WAAkB,KAElD,sBAAKoB,UAAU,SAAf,UACI,cAAC,SAAD,CAEIC,GAAG,UACHgB,QAAQ,UACRR,EAAG,CAAEC,EAAG,UACRV,UAAW,SAAUJ,KAAK,SAL9B,sBAOA,cAAC,SAAD,CAEIK,GAAG,UACHgB,QAAQ,UACRR,EAAG,CAAEC,EAAG,UACRQ,QAAS,kBAAMlC,EAAQa,KAAK,YAAYG,UAAW,SAAUJ,KAAK,SALtE,oCErE1BrB,G,OAAeC,MAAaC,MAAM,CAEpCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MAAaG,SAAS,YAChCwC,gBAAiB3C,MAAaG,SAAS,YACvCyC,UAAW5C,MAAaG,SAAS,YACjC0C,SAAU7C,MAAaG,SAAS,eAGvB2C,EAAS,WAClB,IAAMtC,EAAUC,cACVH,EAAWC,cAFO,EAGAG,qBAHA,mBAGjBG,EAHiB,KAGXC,EAHW,OAIYJ,qBAJZ,mBAIjBC,EAJiB,KAILC,EAJK,KAcxB,OAPAG,qBAAU,WDZQ,IAAC5B,EAAU6B,ECazBM,QAAQC,IAAIV,GACPA,GAEAP,GDhBUnB,ECgBM0B,EDhBIG,ECgBER,EDhBb,uCAAsB,WAAOF,GAAP,iBAAAW,EAAA,+EAEbC,EAAW/B,GAFE,gBAE5BgC,EAF4B,EAE5BA,KAERb,EAAS,CAAEc,KAAM3B,EAAM0B,SACvBH,EAAOK,KAAK,WALwB,gDAOpCC,QAAQC,IAAR,MAPoC,yDAAtB,0DCiBf,CAACV,IAGA,mCACI,sBAAKW,UAAU,QAAf,UACI,cAAC,eAAD,CACIC,GAAG,UACHC,UAAU,UACVC,OAAQhB,EACRiB,QAAS,kBAAMhB,GAAc,IAC7BiB,OACI,cAAC,OAAD,CACIC,KAAK,UACLC,MAAM,OACNC,KAAK,OACLC,EAAG,CAAEC,EAAG,YAVpB,2CAgBA,oBAAIV,UAAU,SAAd,mCACA,cAAC,IAAD,CACIW,cAAe,CACXjC,MAAO,GACPE,SAAU,GACVuC,gBAAiB,GACjBC,UAAW,GACXC,SAAU,IAEdT,iBAAkBrC,EAClBsC,SAAU,SAAAC,GAGNxB,EAAQwB,IAZhB,SAeK,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACG,eAAC,IAAD,CAAMhB,UAAU,OAAhB,UACI,uBAAOA,UAAU,QAAjB,wBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,YAAYV,KAAK,cAC9CmB,EAAOK,UAAY,8BAAML,EAAOK,YAAmB,KAEpD,uBAAOpB,UAAU,QAAjB,uBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,WAAWV,KAAK,aAC7CmB,EAAOM,SAAW,8BAAMN,EAAOM,WAAkB,KAElD,uBAAOrB,UAAU,QAAjB,mBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,QAAQV,KAAK,UAC1CmB,EAAOrC,OAASsC,EAAQtC,MAAQ,8BAAMqC,EAAOrC,QAAe,KAE7D,uBAAOsB,UAAU,QAAjB,4BACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,WAAWV,KAAK,aAC7CmB,EAAOnC,SAAW,8BAAMmC,EAAOnC,WAAkB,KAElD,uBAAOoB,UAAU,QAAjB,8BACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,kBAAkBV,KAAK,aACpDmB,EAAOI,gBAAkB,8BAAMJ,EAAOI,kBAAyB,KAEhE,sBAAKnB,UAAU,SAAf,UACI,cAAC,SAAD,CACIC,GAAG,UACHgB,QAAQ,UACRR,EAAG,CAAEC,EAAG,UACRV,UAAW,SAAUJ,KAAK,SAJ9B,qBAOA,cAAC,SAAD,CACIK,GAAG,aACHgB,QAAQ,aACRR,EAAG,CAAEC,EAAG,UACRQ,QAAS,kBAAMlC,EAAQa,KAAK,MAAMG,UAAW,SAJjD,oC,mCCvF1BzB,G,OAAeC,MAAaC,MAAM,CAEpCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpD4C,SAAU/C,MAAaG,SAAS,YAChC6C,OAAQhD,MACHiD,UAAU,yCACVC,SAAS,2CACTC,QAAQ,gDACRC,IAAI,IACJjD,SAAS,8BACdkD,QAASrD,MAAaG,SAAS,eAGtBmD,EAAY,WACrB,IAAMhD,EAAWC,cADU,GAEXE,cAGoBC,sBALT,mBAKpBC,EALoB,KAKRC,EALQ,OAMaF,qBANb,mBAMpB6C,EANoB,KAMNC,EANM,OAOH9C,qBAPG,mBAOpBG,EAPoB,KAOdC,EAPc,KAmB3B,OAVAC,qBAAU,WACDF,GAIDP,ECtBc,SAACO,GAAD,8CAAU,WAAOP,GAAP,iBAAAW,EAAA,sEAE5BX,EAAS,CAAEc,KAAMtB,IAFW,SNATX,EMGmB0B,ENHN1C,EAAIiB,KAAK,sBAAuBD,GMApC,gBAGpBgC,EAHoB,EAGpBA,KAERb,EAAS,CAAEc,KAAMzB,EAAQ8D,QAAStC,IALN,gDAO5BG,QAAQC,IAAR,MAP4B,kCNAV,IAACpC,IMAS,oBAAV,sDDsBLuE,CAAW7C,IACpB2C,GAAgB,IAJhB5C,GAAc,KAMnB,CAACC,IAGA,mCACI,sBAAKW,UAAU,QAAf,UACI,cAAC,eAAD,CACIC,GAAG,aACHgB,QAAQ,aACRd,OAAQ4B,EACR3B,QAAS,kBAAM4B,GAAgB,IAC/B3B,OACI,cAAC,OAAD,CACIC,KAAK,UACLC,MAAM,QACNC,KAAK,OACLC,EAAG,CAAEC,EAAG,YAVpB,wBAiBA,cAAC,eAAD,CACIT,GAAG,UACHgB,QAAQ,UACRd,OAAQhB,EACRiB,QAAS,kBAAMhB,GAAc,IAC7BiB,OACI,cAAC,OAAD,CACIC,KAAK,UACLC,MAAM,OACNC,KAAK,OACLC,EAAG,CAAEC,EAAG,YAVpB,+BAgBA,oBAAIV,UAAU,SAAd,0BACA,cAAC,IAAD,CACIW,cAAe,CACXY,SAAU,GACVC,OAAQ,GACR9C,MAAO,GACPmD,QAAS,IAGbjB,iBAAkBrC,EAClBsC,SAAU,SAAAC,GAENhB,QAAQC,IAAIe,GACZxB,EAAQwB,IAZhB,SAeK,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACG,eAAC,IAAD,CAAMhB,UAAU,OAAhB,UAEI,uBAAOA,UAAU,QAAjB,sBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,WAAWV,KAAK,aAC7CmB,EAAOQ,SAAW,8BAAMR,EAAOQ,WAAkB,KAElD,uBAAOvB,UAAU,QAAjB,oBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,SAASV,KAAK,WAC3CmB,EAAOS,OAAS,8BAAMT,EAAOS,SAAgB,KAG9C,uBAAOxB,UAAU,QAAjB,mBACA,cAAC,IAAD,CAAOA,UAAU,QAAQM,KAAK,QAAQV,KAAK,UAC1CmB,EAAOrC,OAASsC,EAAQtC,MAAQ,8BAAMqC,EAAOrC,QAAe,KAE7D,uBAAOsB,UAAU,QAAjB,qBACA,cAAC,IAAD,CAAOA,UAAU,WAAWM,KAAK,UAAUV,KAAK,YAC/CmB,EAAOc,QAAU,8BAAMd,EAAOc,UAAiB,KAEhD,qBAAK7B,UAAU,SAAf,SACI,cAAC,SAAD,CAEIC,GAAG,UACHgB,QAAQ,UACRR,EAAG,CAAEC,EAAG,UACRV,UAAW,SAAUJ,KAAK,SAL9B,gC,kBEHjBuC,MA1Gf,WAAsB,IAAD,EACejD,qBADf,mBACVkD,EADU,KACAC,EADA,KAGXvD,EAAWC,cAHA,EAIuBG,qBAJvB,mBAIV6C,EAJU,KAIIC,EAJJ,KAMTrC,EAAS2C,aAAY,SAACC,GAAD,OAAWA,EAAMC,eAAtC7C,KA2BR,OAdAJ,qBAAU,WACNT,EDvBsB,uCAAM,WAAOA,GAAP,mBAAAW,EAAA,sEAE5BX,EAAS,CAAEc,KAAMtB,IAFW,SNaH3B,EAAI8F,IAAI,oBMbL,gBAGpB9C,EAHoB,EAGpBA,KAEAyC,EAAazC,EAAbyC,SACRtD,EAAS,CAAEc,KAAMxB,EAAY6D,QAASG,IANV,kDAQ5BtC,QAAQC,IAAR,MAR4B,0DAAN,yDCwBvB,IAEHR,qBAAU,WACDI,GACDG,QAAQC,IAAI,WAEhBsC,EAAY1C,EAAK,MAClB,CAACA,IAGJG,QAAQC,IAAIqC,EAAU,YAGlB,mCAEQA,EACI,gCACI,cAAC,eAAD,CACInC,GAAG,aACHgB,QAAQ,aACRd,OAAQ4B,EACR3B,QAAS,kBAAM4B,GAAgB,IAC/B3B,OACI,cAAC,OAAD,CACIC,KAAK,UACLC,MAAM,QACNC,KAAK,OACLC,EAAG,CAAEC,EAAG,YAVpB,gCAgBA,eAACgC,EAAA,EAAD,WACI,gCACI,+BACI,mCACA,0CACA,2CAGR,kCACI,+BACI,oBAAIC,MAAM,MAAV,eACA,0CACA,oCAAKP,QAAL,IAAKA,OAAL,EAAKA,EAAUQ,cAEnB,+BACI,oBAAID,MAAM,MAAV,eACA,wCACA,oCAAKP,QAAL,IAAKA,OAAL,EAAKA,EAAUZ,YAEnB,+BACI,oBAAImB,MAAM,MAAV,eACA,uCACA,oCAAKP,QAAL,IAAKA,OAAL,EAAKA,EAAU1D,WAEnB,+BACI,oBAAIiE,MAAM,MAAV,eACA,yCACA,oCAAKP,QAAL,IAAKA,OAAL,EAAKA,EAAUP,mBAI3B,cAAC,SAAD,CACIX,QA9EH,WDaK,IAACnD,ECZvBe,GDYuBf,ECZCqE,EAASS,IDYX,uCAAQ,WAAO/D,GAAP,SAAAW,EAAA,+EAExBC,EAAe3B,GAFS,OAI9Be,EAAS,CAAEc,KAAMvB,EAAQ4D,QAASlE,IAJJ,+CAM9B+B,QAAQC,IAAI,KAAM+C,SANY,wDAAR,wDCXtBd,GAAgB,GAChBe,aAAY,WACRC,OAAOC,SAASC,WACjB,MA0EiBC,EAAE,SACFC,EAAE,SACFnD,GAAG,YACHgB,QAAQ,YACRoC,QAAQ,SACR5C,EAAG,CAAEC,EAAG,QACR4C,OAAO,IACPC,YAAY,IAThB,SAWI,cAAC,OAAD,CAAMjD,KAAK,cAAcE,KAAK,OAAOD,MAAM,eAGlD,sBAAKiD,MAAO,CAAEC,OAAQ,QAASC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAAtF,2BAAgH,cAACC,EAAA,EAAD,CAAStD,MAAM,kBClErIuD,MAlCf,WAAiB,IAAD,EACoB5E,mBAAS,aAD7B,mBACL6E,EADK,KACKC,EADL,KAGZ,OACI,gCACI,8BACI,eAACC,EAAA,EAAD,CAAKC,MAAI,EAAT,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASlD,QAAS,kBAAM8C,EAAY,cAAcK,OAAqB,cAAbN,EAA1D,0BAEJ,cAACI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASlD,QAAS,kBAAM8C,EAAY,cAAcK,OAAqB,cAAbN,EAA1D,gCAKK,cAAbA,EACI,mCACI,cAAC,EAAD,MAGS,cAAbA,GACI,mCACI,cAAC,EAAD,UC6CbO,MA9Df,WAAgB,IAAD,EACWpF,qBADX,mBACNqF,EADM,KACAC,EADA,KAGbjF,qBAAU,WACRO,QAAQC,IAAI,oBAAZ,OAAiCwE,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAM9G,SACtC,CAAC8G,IAEJhF,qBAAU,WACRiF,EAAQjH,KAAKC,MAAML,aAAaC,QAAQ,eACvC,IAEH,IAAMqH,EAAe,WACnBzB,OAAOC,SAASC,SAChB3F,KAAKC,MAAML,aAAauH,MAAM,YAC9BF,EAAQ,OAKJG,EAAS,WACb,OACE,mCACE,wBAAQzD,QAASuD,EAAjB,uBASN,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UAEIF,EAEI,qCAEE,cAAC,IAAD,CAAUK,GAAI,CAAEC,SAAU,WAC1B,eAAC,IAAD,CAAOC,KAAK,QAAQC,OAAK,EAAzB,UACE,cAACJ,EAAD,IACA,cAAC,EAAD,UAIJ,qCACE,cAAC,IAAD,CAAUC,GAAI,CAAEC,SAAU,YAC1B,cAAC,IAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,UAAWnG,IACtC,cAAC,IAAD,CAAOiG,KAAK,UAAUC,OAAK,EAACC,UAAW1D,IACvC,eAAC,IAAD,CAAOwD,KAAK,QAAQC,OAAK,EAAzB,UACE,cAACJ,EAAD,IACA,cAAC,EAAD,eCnDHM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iCCUCQ,EAfK,WAAyC,IAAxCnD,EAAuC,uDAA/B,CAAEoD,SAAU,MAAQC,EAAW,uCACxD,OAAQA,EAAOhG,MACX,KAAKiG,EAGD,OAFA1I,aAAa2I,QAAQ,UAAWvI,KAAKwI,UAAL,sBAAoBH,QAApB,IAAoBA,OAApB,EAAoBA,EAAQjG,QAErD,2BAAK4C,GAAZ,IAAmBoD,SAAUC,EAAOjG,KAAMqG,SAAS,EAAOjF,OAAQ,OACtE,KAAK8E,EAGD,OAFA1I,aAAauH,QAEN,2BAAKnC,GAAZ,IAAmBoD,SAAU,KAAMK,SAAS,EAAOjF,OAAQ,OAC/D,QACI,OAAOwB,I,QCSJ0D,EApBD,WAAoD,IAAnD1D,EAAkD,uDAA1C,CAAE2D,WAAW,EAAMvG,KAAM,IAAMiG,EAAW,uCAC7D,OAAQA,EAAOhG,MACX,IAAK,gBACD,OAAO,2BAAK2C,GAAZ,IAAmB2D,WAAW,IAClC,IAAK,cACD,OAAO,2BAAK3D,GAAZ,IAAmB2D,WAAW,IAElC,KAAK9H,EACD,OAAO,2BAAKmE,GAAZ,IAAmB5C,KAAMiG,EAAO3D,UAEpC,KAAK5D,EACD,OAAOkE,EAAM4D,QAAO,SAACC,GAAD,OAAOA,EAAEvD,MAAQ+C,EAAO3D,WAEhD,KAAK9D,EACD,OAAO,2BAAKoE,GAAZ,IAAmB5C,KAAK,GAAD,mBAAM4C,EAAM5C,MAAZ,CAAkBiG,EAAO3D,YACpD,QACI,OAAOM,ICZJ8D,cAAgB,CAC3BC,OACA9D,gB,SCIE+D,G,OAAQC,YAAYC,EAAUC,YAAQC,YAAgBC,QAYtDC,GAAS,IAAIC,IAGnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,WAAD,CAAmBC,MAAOL,GAAQM,MAPI,UAOUC,qBAAmB,EAAnE,SACE,cAAC,IAAD,CAAUb,MAAOA,EAAjB,SACE,eAAC,gBAAD,CAAec,MAjBT,CACZC,OAAQ,CACNC,QAAS,SACTC,OAAQ,WAcJ,UACE,cAAC,aAAD,IACA,cAAC,EAAD,aAKRC,SAASC,eAAe,SAM1BzC,M","file":"static/js/main.1d1cc425.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// const url = 'http://localhost:5000/posts';\r\n\r\nconst API = axios.create({ baseURL: 'https://assignment-tiwarianupam760.herokuapp.com/' })\r\n\r\nconst url = 'https://assignment-tiwarianupam760.herokuapp.com/userData';\r\nAPI.interceptors.request.use((req) => {\r\n    if (localStorage.getItem('profile')) {\r\n        req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\r\n    }\r\n\r\n    return req;\r\n});\r\n\r\nexport const createUser = (formData) => API.post('userData/createuser', formData)\r\nexport const getUserData = () => API.get('userData/getuser')\r\n\r\nexport const signIn = (formData) => API.post('user/signin', formData)\r\nexport const signUp = (formData) => API.post('user/signup', formData)\r\n\r\nexport const deleteData = (id) => API.delete(`${url}/${id}`)","export const AUTH = 'AUTH';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const CREATE = 'CREATE';\r\nexport const FETCH_ALL = 'FETCH_ALL';\r\nexport const FETCH_DATA = 'FETCH_DATA';\r\nexport const DELETE = 'DELETE'\r\nexport const START_LOADING = 'START_LOADING';\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport \"./login.css\"\r\nimport { Button, Icon, Notification } from 'atomize';\r\nimport { useDispatch } from 'react-redux'\r\nimport { signin } from '../../Redux/action/users';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n\r\n    email: Yup.string().email('Invalid email').required('Required'),\r\n    password: Yup.string().required('Required'),\r\n});\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n\r\n    const [dangerDark, setDangerDark] = useState()\r\n    const [form, setForm] = useState();\r\n\r\n    useEffect(() => {\r\n        if (!form) {\r\n        }\r\n        else dispatch(signin(form, history));\r\n    }, [form])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <Notification\r\n                    bg=\"info100\"\r\n                    textColor=\"info800\"\r\n                    isOpen={dangerDark}\r\n                    onClose={() => setDangerDark(false)}\r\n                    prefix={\r\n                        <Icon\r\n                            name=\"Success\"\r\n                            color=\"blue\"\r\n                            size=\"18px\"\r\n                            m={{ r: \"0.5rem\" }}\r\n                        />\r\n                    }\r\n                >\r\n                    You are Logged in\r\n                </Notification>\r\n                <h1 className=\"header\">Login</h1>\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: ''\r\n                    }}\r\n                    validationSchema={SignupSchema}\r\n                    onSubmit={values => {\r\n                        // same shape as initial values\r\n                        setForm(values)\r\n                    }}\r\n                >\r\n                    {({ errors, touched }) => (\r\n                        <Form className=\"form\">\r\n                            <label className=\"lable\">Email</label>\r\n                            <Field className=\"input\" name=\"email\" type=\"email\" />\r\n                            {errors.email && touched.email ? <div>{errors.email}</div> : null}\r\n                            <label className=\"lable\">Password</label>\r\n                            <Field className=\"input\" name=\"password\" type=\"password\" />\r\n                            {errors.password ? <div>{errors.password}</div> : null}\r\n\r\n                            <div className=\"button\">\r\n                                <Button\r\n\r\n                                    bg=\"info700\"\r\n                                    hoverBg=\"info600\"\r\n                                    m={{ r: \"0.5rem\" }}\r\n                                    className={\"Button\"} type=\"submit\">Sign In </Button>\r\n\r\n                                <Button\r\n\r\n                                    bg=\"info700\"\r\n                                    hoverBg=\"info600\"\r\n                                    m={{ r: \"0.5rem\" }}\r\n                                    onClick={() => history.push('/signup')} className={\"Button\"} type=\"submit\">Sign Up</Button>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","import * as api from '../api';\r\nimport { AUTH } from '../../constants/actionType';\r\nexport const signin = (formData, router) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.signIn(formData);\r\n\r\n        dispatch({ type: AUTH, data });\r\n        router.push('/home');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const signup = (formData, router) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.signUp(formData);\r\n\r\n        dispatch({ type: AUTH, data });\r\n        router.push('/home  ');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport \"./login.css\"\r\nimport { Button, Icon, Notification } from 'atomize';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { signup } from '../../Redux/action/users';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n\r\n    email: Yup.string().email('Invalid email').required('Required'),\r\n    password: Yup.string().required('Required'),\r\n    confirmPassword: Yup.string().required('Required'),\r\n    firstName: Yup.string().required('Required'),\r\n    lastName: Yup.string().required('Required'),\r\n});\r\n\r\nexport const Signup = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const [form, setForm] = useState();\r\n    const [dangerDark, setDangerDark] = useState()\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(form)\r\n        if (!form) {\r\n        }\r\n        else dispatch(signup(form, history));\r\n    }, [form])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <Notification\r\n                    bg=\"info100\"\r\n                    textColor=\"info800\"\r\n                    isOpen={dangerDark}\r\n                    onClose={() => setDangerDark(false)}\r\n                    prefix={\r\n                        <Icon\r\n                            name=\"Success\"\r\n                            color=\"blue\"\r\n                            size=\"18px\"\r\n                            m={{ r: \"0.5rem\" }}\r\n                        />\r\n                    }\r\n                >\r\n                    New User Created Successfully\r\n                </Notification>\r\n                <h1 className=\"header\">Create a new Account </h1>\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: '',\r\n                        confirmPassword: '',\r\n                        firstName: '',\r\n                        lastName: ''\r\n                    }}\r\n                    validationSchema={SignupSchema}\r\n                    onSubmit={values => {\r\n                        // same shape as initial values\r\n                        // console.log(values, \"formikvlaue\");\r\n                        setForm(values)\r\n                    }}\r\n                >\r\n                    {({ errors, touched }) => (\r\n                        <Form className=\"form\">\r\n                            <label className=\"lable\">First Name</label>\r\n                            <Field className=\"input\" name=\"firstName\" type=\"firstname\" />\r\n                            {errors.firstName ? <div>{errors.firstName}</div> : null}\r\n\r\n                            <label className=\"lable\">Last Name</label>\r\n                            <Field className=\"input\" name=\"lastName\" type=\"lastName\" />\r\n                            {errors.lastName ? <div>{errors.lastName}</div> : null}\r\n\r\n                            <label className=\"lable\">Email</label>\r\n                            <Field className=\"input\" name=\"email\" type=\"email\" />\r\n                            {errors.email && touched.email ? <div>{errors.email}</div> : null}\r\n\r\n                            <label className=\"lable\">Enter Password</label>\r\n                            <Field className=\"input\" name=\"password\" type=\"password\" />\r\n                            {errors.password ? <div>{errors.password}</div> : null}\r\n\r\n                            <label className=\"lable\">Confirm Password</label>\r\n                            <Field className=\"input\" name=\"confirmPassword\" type=\"Password\" />\r\n                            {errors.confirmPassword ? <div>{errors.confirmPassword}</div> : null}\r\n\r\n                            <div className=\"button\">\r\n                                <Button\r\n                                    bg=\"info700\"\r\n                                    hoverBg=\"info600\"\r\n                                    m={{ r: \"0.5rem\" }}\r\n                                    className={\"Button\"} type=\"submit\">Sign Up</Button>\r\n\r\n\r\n                                <Button\r\n                                    bg=\"success700\"\r\n                                    hoverBg=\"success600\"\r\n                                    m={{ r: \"0.5rem\" }}\r\n                                    onClick={() => history.push('/')} className={\"Button\"} >Sign In</Button>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport \"./login.css\"\r\nimport { Button, Icon, Notification } from 'atomize';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { createUser } from '../../Redux/action/userData';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n\r\n    email: Yup.string().email('Invalid email').required('Required'),\r\n    userName: Yup.string().required('Required'),\r\n    mobile: Yup.number()\r\n        .typeError(\"That doesn't look like a phone number\")\r\n        .positive(\"A phone number can't start with a minus\")\r\n        .integer(\"A phone number can't include a decimal point\")\r\n        .min(10)\r\n        .required('A phone number is required'),\r\n    address: Yup.string().required('Required'),\r\n});\r\n\r\nexport const ScreenOne = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n\r\n    const [dangerDark, setDangerDark] = useState()\r\n    const [dataSubmited, setDataSubmited] = useState()\r\n    const [form, setForm] = useState();\r\n\r\n    useEffect(() => {\r\n        if (!form) {\r\n            setDangerDark(true)\r\n        }\r\n        else {\r\n            dispatch(createUser(form, history));\r\n            setDataSubmited(true)\r\n        }\r\n    }, [form])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <Notification\r\n                    bg=\"warning700\"\r\n                    hoverBg=\"warning600\"\r\n                    isOpen={dataSubmited}\r\n                    onClose={() => setDataSubmited(false)}\r\n                    prefix={\r\n                        <Icon\r\n                            name=\"Success\"\r\n                            color=\"white\"\r\n                            size=\"18px\"\r\n                            m={{ r: \"0.5rem\" }}\r\n                        />\r\n                    }\r\n                >\r\n                    Data Saved\r\n                </Notification>\r\n\r\n                <Notification\r\n                    bg=\"info700\"\r\n                    hoverBg=\"info600\"\r\n                    isOpen={dangerDark}\r\n                    onClose={() => setDangerDark(false)}\r\n                    prefix={\r\n                        <Icon\r\n                            name=\"Success\"\r\n                            color=\"blue\"\r\n                            size=\"18px\"\r\n                            m={{ r: \"0.5rem\" }}\r\n                        />\r\n                    }\r\n                >\r\n                    You are Logged in\r\n                </Notification>\r\n                <h1 className=\"header\">User Details</h1>\r\n                <Formik\r\n                    initialValues={{\r\n                        userName: '',\r\n                        mobile: '',\r\n                        email: '',\r\n                        address: '',\r\n\r\n                    }}\r\n                    validationSchema={SignupSchema}\r\n                    onSubmit={values => {\r\n                        // same shape as initial values\r\n                        console.log(values)\r\n                        setForm(values)\r\n                    }}\r\n                >\r\n                    {({ errors, touched }) => (\r\n                        <Form className=\"form\">\r\n\r\n                            <label className=\"lable\">Username</label>\r\n                            <Field className=\"input\" name=\"userName\" type=\"username\" />\r\n                            {errors.userName ? <div>{errors.userName}</div> : null}\r\n\r\n                            <label className=\"lable\">Mobile</label>\r\n                            <Field className=\"input\" name=\"mobile\" type=\"number\" />\r\n                            {errors.mobile ? <div>{errors.mobile}</div> : null}\r\n\r\n\r\n                            <label className=\"lable\">Email</label>\r\n                            <Field className=\"input\" name=\"email\" type=\"email\" />\r\n                            {errors.email && touched.email ? <div>{errors.email}</div> : null}\r\n\r\n                            <label className=\"lable\">Address</label>\r\n                            <Field className=\"textarea\" name=\"address\" type=\"address\" />\r\n                            {errors.address ? <div>{errors.address}</div> : null}\r\n\r\n                            <div className=\"button\">\r\n                                <Button\r\n\r\n                                    bg=\"info700\"\r\n                                    hoverBg=\"info600\"\r\n                                    m={{ r: \"0.5rem\" }}\r\n                                    className={\"Button\"} type=\"submit\">Save</Button>\r\n\r\n\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","import { START_LOADING, CREATE, FETCH_DATA, DELETE } from \"../../constants/actionType\"\r\nimport * as api from \"../api/index\";\r\n\r\nexport const getUserDetails = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING });\r\n        const { data } = await api.getUserData();\r\n        // console.log(data, \"this is user details\")\r\n        const { userData } = data\r\n        dispatch({ type: FETCH_DATA, payload: userData });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const createUser = (form) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING });\r\n        const { data } = await api.createUser(form);\r\n\r\n        dispatch({ type: CREATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\nexport const deleteUserData = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deleteData(id);\r\n\r\n        dispatch({ type: DELETE, payload: id });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n};","import React, { useEffect, useState } from 'react'\r\nimport { Table } from 'reactstrap';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { deleteUserData, getUserDetails } from '../../Redux/action/userData';\r\nimport { Spinner } from 'reactstrap';\r\nimport { Button, Icon, Notification } from 'atomize';\r\nfunction Screentwo() {\r\n    const [userData, setUserdata] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n    const [dataSubmited, setDataSubmited] = useState()\r\n\r\n    const { data } = useSelector((state) => state.userDetails);\r\n\r\n    const handelDelete = () => {\r\n        dispatch(deleteUserData(userData._id))\r\n        setDataSubmited(true)\r\n        setInterval(() => {\r\n            window.location.reload()\r\n        }, 3000);\r\n\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserDetails());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!data) {\r\n            console.log(\"loading\")\r\n        }\r\n        setUserdata(data[0])\r\n    }, [data])\r\n\r\n\r\n    console.log(userData, \"userdata\")\r\n\r\n    return (\r\n        <>\r\n            {\r\n                userData ? (\r\n                    <div>\r\n                        <Notification\r\n                            bg=\"warning700\"\r\n                            hoverBg=\"warning600\"\r\n                            isOpen={dataSubmited}\r\n                            onClose={() => setDataSubmited(false)}\r\n                            prefix={\r\n                                <Icon\r\n                                    name=\"Success\"\r\n                                    color=\"white\"\r\n                                    size=\"18px\"\r\n                                    m={{ r: \"0.5rem\" }}\r\n                                />\r\n                            }\r\n                        >\r\n                            Deleted Suessfully\r\n                        </Notification>\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Category</th>\r\n                                    <th>Data</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th scope=\"row\">1</th>\r\n                                    <td>Username</td>\r\n                                    <td>{userData?.username}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th scope=\"row\">2</th>\r\n                                    <td>Mobile</td>\r\n                                    <td>{userData?.mobile}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th scope=\"row\">3</th>\r\n                                    <td>email</td>\r\n                                    <td>{userData?.email}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th scope=\"row\">4</th>\r\n                                    <td>Address</td>\r\n                                    <td>{userData?.address}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                        <Button\r\n                            onClick={handelDelete}\r\n                            h=\"2.5rem\"\r\n                            w=\"2.5rem\"\r\n                            bg=\"danger700\"\r\n                            hoverBg=\"danger600\"\r\n                            rounded=\"circle\"\r\n                            m={{ r: \"1rem\" }}\r\n                            shadow=\"2\"\r\n                            hoverShadow=\"4\"\r\n                        >\r\n                            <Icon name=\"DeleteSolid\" size=\"20px\" color=\"white\" />\r\n                        </Button>\r\n                    </div>\r\n                ) : (<div style={{ height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}> No Data Found<Spinner color=\"primary\" >\r\n                </Spinner></div>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Screentwo\r\n","import React, { useState } from 'react'\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { ScreenOne } from '../navbar/screeone';\r\nimport Screentwo from '../screentwo/screentwo';\r\n\r\nfunction Home() {\r\n    const [isScreen, setIsScreen] = useState(\"ScreenOne\")\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink onClick={() => setIsScreen(\"ScreenOne\")} active={isScreen === \"ScreenOne\" ? true : false}>Screen One</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink onClick={() => setIsScreen(\"ScreenTwo\")} active={isScreen === \"ScreenTwo\" ? true : false}> Screen Two</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </div>\r\n            {\r\n                isScreen === \"ScreenOne\" ? (\r\n                    <>\r\n                        <ScreenOne />\r\n                    </>\r\n                ) : (\r\n                    isScreen === \"ScreenTwo\" && (\r\n                        <>\r\n                            <Screentwo />\r\n                        </>\r\n                    )\r\n                )\r\n\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useEffect, useState } from 'react'\nimport { Login } from './components/login/login';\nimport { Signup } from './components/signup/signup';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport Home from './components/home/home';\n\nfunction App() {\n  const [user, setUser] = useState();\n\n  useEffect(() => {\n    console.log(\"this is the token\", user?.token)\n  }, [user])\n\n  useEffect(() => {\n    setUser(JSON.parse(localStorage.getItem('profile')))\n  }, [])\n\n  const handlelogout = () => {\n    window.location.reload();\n    JSON.parse(localStorage.clear('profile'));\n    setUser(null);\n\n\n  }\n\n  const Button = () => {\n    return (\n      <>\n        <button onClick={handlelogout}>Logout</button>\n\n      </>\n    )\n  }\n\n  if (!user) {\n\n  }\n  return (\n    <Router>\n      <Switch>\n        {\n          user ?\n            (\n              <>\n\n                <Redirect to={{ pathname: '/home' }} />\n                <Route path='/home' exact>\n                  <Button />\n                  <Home />\n                </Route>\n              </>\n            ) : (\n              <>\n                <Redirect to={{ pathname: '/login' }} />\n                <Route path='/login' exact component={Login} />\n                <Route path='/signup' exact component={Signup} />\n                <Route path='/home' exact>\n                  <Button />\n                  <Home />\n                </Route>\n              </>\n            )\n        }\n      </Switch>\n    </Router >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionType from '../constants/actionType'\r\n\r\nconst authReducer = (state = { authData: null }, action) => {\r\n    switch (action.type) {\r\n        case actionType.AUTH:\r\n            localStorage.setItem('profile', JSON.stringify({ ...action?.data }));\r\n\r\n            return { ...state, authData: action.data, loading: false, errors: null };\r\n        case actionType.LOGOUT:\r\n            localStorage.clear();\r\n\r\n            return { ...state, authData: null, loading: false, errors: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authReducer","import { FETCH_DATA, CREATE, DELETE } from \"../constants/actionType\"\r\n\r\nconst State = (state = { isLoading: true, data: [] }, action) => {\r\n    switch (action.type) {\r\n        case 'START_LOADING':\r\n            return { ...state, isLoading: true };\r\n        case 'END_LOADING':\r\n            return { ...state, isLoading: false };\r\n\r\n        case FETCH_DATA:\r\n            return { ...state, data: action.payload };\r\n\r\n        case DELETE:\r\n            return state.filter((s) => s._id !== action.payload);\r\n\r\n        case CREATE:\r\n            return { ...state, data: [...state.data, action.payload] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default State","import { combineReducers } from \"redux\";\r\n\r\nimport auth from './auth'\r\nimport userDetails from './userDetails'\r\n\r\n\r\nexport default combineReducers({\r\n    auth,\r\n    userDetails\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, StyleReset } from 'atomize';\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\nconst theme = {\n  colors: {\n    primary: 'tomato',\n    accent: 'yellow',\n  },\n};\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\nconst engine = new Styletron();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n      <Provider store={store}>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n          <App />\n        </ThemeProvider>\n      </Provider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}